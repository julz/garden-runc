// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"

	"github.com/docker/libnetwork/iptables"
	"github.com/julz/garden-runc"
)

type FakeChain struct {
	ForwardStub        func(action iptables.Action, ip net.IP, port int, proto, dest_addr string, dest_port int) error
	forwardMutex       sync.RWMutex
	forwardArgsForCall []struct {
		action    iptables.Action
		ip        net.IP
		port      int
		proto     string
		dest_addr string
		dest_port int
	}
	forwardReturns struct {
		result1 error
	}
}

func (fake *FakeChain) Forward(action iptables.Action, ip net.IP, port int, proto string, dest_addr string, dest_port int) error {
	fake.forwardMutex.Lock()
	fake.forwardArgsForCall = append(fake.forwardArgsForCall, struct {
		action    iptables.Action
		ip        net.IP
		port      int
		proto     string
		dest_addr string
		dest_port int
	}{action, ip, port, proto, dest_addr, dest_port})
	fake.forwardMutex.Unlock()
	if fake.ForwardStub != nil {
		return fake.ForwardStub(action, ip, port, proto, dest_addr, dest_port)
	} else {
		return fake.forwardReturns.result1
	}
}

func (fake *FakeChain) ForwardCallCount() int {
	fake.forwardMutex.RLock()
	defer fake.forwardMutex.RUnlock()
	return len(fake.forwardArgsForCall)
}

func (fake *FakeChain) ForwardArgsForCall(i int) (iptables.Action, net.IP, int, string, string, int) {
	fake.forwardMutex.RLock()
	defer fake.forwardMutex.RUnlock()
	return fake.forwardArgsForCall[i].action, fake.forwardArgsForCall[i].ip, fake.forwardArgsForCall[i].port, fake.forwardArgsForCall[i].proto, fake.forwardArgsForCall[i].dest_addr, fake.forwardArgsForCall[i].dest_port
}

func (fake *FakeChain) ForwardReturns(result1 error) {
	fake.ForwardStub = nil
	fake.forwardReturns = struct {
		result1 error
	}{result1}
}

var _ gardenrunc.Chain = new(FakeChain)

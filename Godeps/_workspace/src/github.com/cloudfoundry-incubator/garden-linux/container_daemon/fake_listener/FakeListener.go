// This file was generated by counterfeiter
package fake_listener

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/container_daemon"
	"github.com/cloudfoundry-incubator/garden-linux/container_daemon/unix_socket"
)

type FakeListener struct {
	ListenStub        func(ch unix_socket.ConnectionHandler) error
	listenMutex       sync.RWMutex
	listenArgsForCall []struct {
		ch unix_socket.ConnectionHandler
	}
	listenReturns struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
}

func (fake *FakeListener) Listen(ch unix_socket.ConnectionHandler) error {
	fake.listenMutex.Lock()
	fake.listenArgsForCall = append(fake.listenArgsForCall, struct {
		ch unix_socket.ConnectionHandler
	}{ch})
	fake.listenMutex.Unlock()
	if fake.ListenStub != nil {
		return fake.ListenStub(ch)
	} else {
		return fake.listenReturns.result1
	}
}

func (fake *FakeListener) ListenCallCount() int {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	return len(fake.listenArgsForCall)
}

func (fake *FakeListener) ListenArgsForCall(i int) unix_socket.ConnectionHandler {
	fake.listenMutex.RLock()
	defer fake.listenMutex.RUnlock()
	return fake.listenArgsForCall[i].ch
}

func (fake *FakeListener) ListenReturns(result1 error) {
	fake.ListenStub = nil
	fake.listenReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeListener) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeListener) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeListener) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

var _ container_daemon.Listener = new(FakeListener)

// This file was generated by counterfeiter
package fake_rlimits_env_encoder

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden"
	"github.com/cloudfoundry-incubator/garden-linux/container_daemon"
)

type FakeRlimitsEnvEncoder struct {
	EncodeLimitsStub        func(garden.ResourceLimits) string
	encodeLimitsMutex       sync.RWMutex
	encodeLimitsArgsForCall []struct {
		arg1 garden.ResourceLimits
	}
	encodeLimitsReturns struct {
		result1 string
	}
}

func (fake *FakeRlimitsEnvEncoder) EncodeLimits(arg1 garden.ResourceLimits) string {
	fake.encodeLimitsMutex.Lock()
	fake.encodeLimitsArgsForCall = append(fake.encodeLimitsArgsForCall, struct {
		arg1 garden.ResourceLimits
	}{arg1})
	fake.encodeLimitsMutex.Unlock()
	if fake.EncodeLimitsStub != nil {
		return fake.EncodeLimitsStub(arg1)
	} else {
		return fake.encodeLimitsReturns.result1
	}
}

func (fake *FakeRlimitsEnvEncoder) EncodeLimitsCallCount() int {
	fake.encodeLimitsMutex.RLock()
	defer fake.encodeLimitsMutex.RUnlock()
	return len(fake.encodeLimitsArgsForCall)
}

func (fake *FakeRlimitsEnvEncoder) EncodeLimitsArgsForCall(i int) garden.ResourceLimits {
	fake.encodeLimitsMutex.RLock()
	defer fake.encodeLimitsMutex.RUnlock()
	return fake.encodeLimitsArgsForCall[i].arg1
}

func (fake *FakeRlimitsEnvEncoder) EncodeLimitsReturns(result1 string) {
	fake.EncodeLimitsStub = nil
	fake.encodeLimitsReturns = struct {
		result1 string
	}{result1}
}

var _ container_daemon.RlimitsEnvEncoder = new(FakeRlimitsEnvEncoder)

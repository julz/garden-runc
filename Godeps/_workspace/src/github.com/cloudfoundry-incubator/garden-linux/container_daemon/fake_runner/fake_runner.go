// This file was generated by counterfeiter
package fake_runner

import (
	"os/exec"
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/container_daemon"
)

type FakeRunner struct {
	StartStub        func(cmd *exec.Cmd) error
	startMutex       sync.RWMutex
	startArgsForCall []struct {
		cmd *exec.Cmd
	}
	startReturns struct {
		result1 error
	}
	WaitStub        func(cmd *exec.Cmd) byte
	waitMutex       sync.RWMutex
	waitArgsForCall []struct {
		cmd *exec.Cmd
	}
	waitReturns struct {
		result1 byte
	}
}

func (fake *FakeRunner) Start(cmd *exec.Cmd) error {
	fake.startMutex.Lock()
	fake.startArgsForCall = append(fake.startArgsForCall, struct {
		cmd *exec.Cmd
	}{cmd})
	fake.startMutex.Unlock()
	if fake.StartStub != nil {
		return fake.StartStub(cmd)
	} else {
		return fake.startReturns.result1
	}
}

func (fake *FakeRunner) StartCallCount() int {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return len(fake.startArgsForCall)
}

func (fake *FakeRunner) StartArgsForCall(i int) *exec.Cmd {
	fake.startMutex.RLock()
	defer fake.startMutex.RUnlock()
	return fake.startArgsForCall[i].cmd
}

func (fake *FakeRunner) StartReturns(result1 error) {
	fake.StartStub = nil
	fake.startReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRunner) Wait(cmd *exec.Cmd) byte {
	fake.waitMutex.Lock()
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct {
		cmd *exec.Cmd
	}{cmd})
	fake.waitMutex.Unlock()
	if fake.WaitStub != nil {
		return fake.WaitStub(cmd)
	} else {
		return fake.waitReturns.result1
	}
}

func (fake *FakeRunner) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeRunner) WaitArgsForCall(i int) *exec.Cmd {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return fake.waitArgsForCall[i].cmd
}

func (fake *FakeRunner) WaitReturns(result1 byte) {
	fake.WaitStub = nil
	fake.waitReturns = struct {
		result1 byte
	}{result1}
}

var _ container_daemon.Runner = new(FakeRunner)

// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden"
)

type FakeProcess struct {
	IDStub        func() uint32
	iDMutex       sync.RWMutex
	iDArgsForCall []struct{}
	iDReturns     struct {
		result1 uint32
	}
	WaitStub        func() (int, error)
	waitMutex       sync.RWMutex
	waitArgsForCall []struct{}
	waitReturns     struct {
		result1 int
		result2 error
	}
	SetTTYStub        func(garden.TTYSpec) error
	setTTYMutex       sync.RWMutex
	setTTYArgsForCall []struct {
		arg1 garden.TTYSpec
	}
	setTTYReturns struct {
		result1 error
	}
	SignalStub        func(garden.Signal) error
	signalMutex       sync.RWMutex
	signalArgsForCall []struct {
		arg1 garden.Signal
	}
	signalReturns struct {
		result1 error
	}
}

func (fake *FakeProcess) ID() uint32 {
	fake.iDMutex.Lock()
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct{}{})
	fake.iDMutex.Unlock()
	if fake.IDStub != nil {
		return fake.IDStub()
	} else {
		return fake.iDReturns.result1
	}
}

func (fake *FakeProcess) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeProcess) IDReturns(result1 uint32) {
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 uint32
	}{result1}
}

func (fake *FakeProcess) Wait() (int, error) {
	fake.waitMutex.Lock()
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct{}{})
	fake.waitMutex.Unlock()
	if fake.WaitStub != nil {
		return fake.WaitStub()
	} else {
		return fake.waitReturns.result1, fake.waitReturns.result2
	}
}

func (fake *FakeProcess) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeProcess) WaitReturns(result1 int, result2 error) {
	fake.WaitStub = nil
	fake.waitReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeProcess) SetTTY(arg1 garden.TTYSpec) error {
	fake.setTTYMutex.Lock()
	fake.setTTYArgsForCall = append(fake.setTTYArgsForCall, struct {
		arg1 garden.TTYSpec
	}{arg1})
	fake.setTTYMutex.Unlock()
	if fake.SetTTYStub != nil {
		return fake.SetTTYStub(arg1)
	} else {
		return fake.setTTYReturns.result1
	}
}

func (fake *FakeProcess) SetTTYCallCount() int {
	fake.setTTYMutex.RLock()
	defer fake.setTTYMutex.RUnlock()
	return len(fake.setTTYArgsForCall)
}

func (fake *FakeProcess) SetTTYArgsForCall(i int) garden.TTYSpec {
	fake.setTTYMutex.RLock()
	defer fake.setTTYMutex.RUnlock()
	return fake.setTTYArgsForCall[i].arg1
}

func (fake *FakeProcess) SetTTYReturns(result1 error) {
	fake.SetTTYStub = nil
	fake.setTTYReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProcess) Signal(arg1 garden.Signal) error {
	fake.signalMutex.Lock()
	fake.signalArgsForCall = append(fake.signalArgsForCall, struct {
		arg1 garden.Signal
	}{arg1})
	fake.signalMutex.Unlock()
	if fake.SignalStub != nil {
		return fake.SignalStub(arg1)
	} else {
		return fake.signalReturns.result1
	}
}

func (fake *FakeProcess) SignalCallCount() int {
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	return len(fake.signalArgsForCall)
}

func (fake *FakeProcess) SignalArgsForCall(i int) garden.Signal {
	fake.signalMutex.RLock()
	defer fake.signalMutex.RUnlock()
	return fake.signalArgsForCall[i].arg1
}

func (fake *FakeProcess) SignalReturns(result1 error) {
	fake.SignalStub = nil
	fake.signalReturns = struct {
		result1 error
	}{result1}
}

var _ garden.Process = new(FakeProcess)
